version: '3.8'

services:
  # idRock Fraud Detection API
  idrock-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - API_PORT=3001
      - API_HOST=0.0.0.0
      - PROXYCHECK_API_KEY=${PROXYCHECK_API_KEY:-demo_key}
      - SQLITE_DB_PATH=/app/data/idrock.db
      - LOG_LEVEL=info
      - CORS_ORIGIN=*
    volumes:
      - ./data:/app/data
      - ./api/logs:/app/logs
    networks:
      - idrock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NexShop Demo E-commerce Store
  nexshop-store:
    build:
      context: ./demo-store
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_IDROCK_API_URL=http://localhost:8080/api
      - REACT_APP_ENVIRONMENT=development
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./demo-store/src:/app/src
      - ./demo-store/public:/app/public
    networks:
      - idrock-network
    depends_on:
      idrock-api:
        condition: service_healthy
    restart: unless-stopped

  # NGINX Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
    networks:
      - idrock-network
    depends_on:
      - idrock-api
      - nexshop-store
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (for future performance optimization)
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - idrock-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass idrock_redis_pass
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  idrock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  app_data:
    driver: local